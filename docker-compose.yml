version: "3.9"

services:
  # 🗃️ PostgreSQL Database
  db:
    image: postgres:16
    ports:
      - "${DB_PORT}:5433"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 30s

  # 📓 Story Service (Go)
  stories:
    build:
      context: .
      dockerfile: services/stories/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_STORIES}:4101"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost4101/graphql"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # 🧍 Users Service (Go)
  users:
    build:
      context: .
      dockerfile: services/users/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_USERS}:4102"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4102/graphql"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # 🎨 Gradio Frontend Service (Python) need lots of work
  # orders:
  #   build:
  #     context: .
  #     dockerfile: services/orders/dockerfile
  #   env_file:
  #     - .env
  #   ports:
  #     - "${PORT_ORDERS}:4003"
  #   environment:
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4103/graphql"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 40s

  # 🤖AI Summary Service port 4104

  # Seed runs after services create tables
  # db-seed:
  #   image: postgres:16
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     users:
  #       condition: service_started
  #     products:
  #       condition: service_started
  #     orders:
  #       condition: service_started
  #   environment:
  #     - PGPASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - ./database/init/01-seed-data.sql:/seed-data.sql
  #   command: >
  #     bash -c "
  #       echo 'Waiting for services to create tables...' &&
  #       sleep 15 &&
  #       echo 'Running seed data...' &&
  #       psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /seed-data.sql &&
  #       echo 'Seed data completed successfully!'
  #     "
  #   restart: "no"

  # 🚪 Apollo Gateway (Node.js)
  gateway:
    build:
      context: .
      dockerfile: gateway/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_GATEWAY}:4100"
    depends_on:
      # orders:
      #   condition: service_started
      users:
        condition: service_started
      stories:
        condition: service_started
      # db-seed:
      #   condition: service_completed_successfully
    restart: unless-stopped

volumes:
  pgdata:
