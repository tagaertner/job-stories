package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/tagaertner/job-stories/services/stories/generated"
	"github.com/tagaertner/job-stories/services/stories/models"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, input models.CreateStoryInput) (*generated.JobStory, error) {
	panic(fmt.Errorf("not implemented: CreateStory - createStory"))
}

// UpdateStory is the resolver for the updateStory field.
func (r *mutationResolver) UpdateStory(ctx context.Context, input models.UpdateStoryInput) (*generated.JobStory, error) {
	panic(fmt.Errorf("not implemented: UpdateStory - updateStory"))
}

// DeleteStory is the resolver for the deleteStory field.
func (r *mutationResolver) DeleteStory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStory - deleteStory"))
}

// Stories is the resolver for the stories field.
func (r *queryResolver) Stories(ctx context.Context, filter *generated.StoryFilter, limit *int, offset *int) ([]*generated.JobStory, error) {
	panic(fmt.Errorf("not implemented: Stories - stories"))
}

// Story is the resolver for the story field.
func (r *queryResolver) Story(ctx context.Context, id string) (*generated.JobStory, error) {
	panic(fmt.Errorf("not implemented: Story - story"))
}

// StoriesByUser is the resolver for the storiesByUser field.
func (r *queryResolver) StoriesByUser(ctx context.Context, userID string, filter *generated.StoryFilter) ([]*generated.JobStory, error) {
	panic(fmt.Errorf("not implemented: StoriesByUser - storiesByUser"))
}

// UserID is the resolver for the userId field.
func (r *createStoryInputResolver) UserID(ctx context.Context, obj *models.CreateStoryInput, data string) error {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Tags is the resolver for the tags field.
func (r *createStoryInputResolver) Tags(ctx context.Context, obj *models.CreateStoryInput, data []string) error {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// UserID is the resolver for the userId field.
func (r *updateStoryInputResolver) UserID(ctx context.Context, obj *models.UpdateStoryInput, data string) error {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Tags is the resolver for the tags field.
func (r *updateStoryInputResolver) Tags(ctx context.Context, obj *models.UpdateStoryInput, data []string) error {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// CreateStoryInput returns generated.CreateStoryInputResolver implementation.
func (r *Resolver) CreateStoryInput() generated.CreateStoryInputResolver {
	return &createStoryInputResolver{r}
}

// UpdateStoryInput returns generated.UpdateStoryInputResolver implementation.
func (r *Resolver) UpdateStoryInput() generated.UpdateStoryInputResolver {
	return &updateStoryInputResolver{r}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type createStoryInputResolver struct{ *Resolver }
type updateStoryInputResolver struct{ *Resolver }
