package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/tagaertner/job-stories/services/stories/generated"
	"github.com/tagaertner/job-stories/services/stories/models"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, input models.CreateStoryInput) (*generated.JobStory, error) {
	story, err := r.StoryService.CreateStory(
		ctx,
		input,
	)
	if err != nil {
		return nil, err
	}
	return ToGraphQLStory(story), nil
}

// UpdateStory is the resolver for the updateStory field.
func (r *mutationResolver) UpdateStory(ctx context.Context, input models.UpdateStoryInput) (*generated.JobStory, error) {
	story, err := r.StoryService.UpdateStory(
		ctx,
		input.ID,
		input,
	)
	if err != nil {
		return nil, err
	}
	return ToGraphQLStory(story), nil
}

// DeleteStory is the resolver for the deleteStory field.
func (r *mutationResolver) DeleteStory(ctx context.Context, input *models.DeleteStoryInput) (bool, error) {
	return r.StoryService.DeleteStory(ctx, input)
}

// Stories is the resolver for the stories field.
func (r *queryResolver) Stories(ctx context.Context, filter *generated.StoryFilter, limit *int, offset *int) ([]*generated.JobStory, error) {
	story, err := r.StoryService.GetAllStories()
	if err != nil {
		return nil, err
	}
	return ToGraphQLStoryList(story), nil
}

// Story is the resolver for the story field.
func (r *queryResolver) Story(ctx context.Context, id string) (*generated.JobStory, error) {
	story, err := r.StoryService.GetStoryByID(id)
	if err != nil {
		return nil, err
	}
	return ToGraphQLStory(story), nil
}

// StoriesByUser is the resolver for the storiesByUser field.
func (r *queryResolver) StoriesByUser(ctx context.Context, userID string, page *int, pageSize *int) (*generated.PaginatedStories, error) {
	p := 1
	ps := 2 
	if page != nil {
		p = *page
	}
	if pageSize != nil{
		ps = *pageSize
	}

	stories, total, err := r.StoryService.GetStoriesByUser(ctx, userID, p, ps)
	if err != nil{
		return nil, err
	}
	return &generated.PaginatedStories{
		Stories: ToGraphQLStoryList(stories),
		TotalCount: total,
		CurrentPage: p,
		HasNextPage: (p *ps) < total,
	}, 
		nil
	}


// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
